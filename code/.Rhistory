MSstatsMergeFractions = function(input) {
ABUNDANCE = INTENSITY = GROUP_ORIGINAL = SUBJECT_ORIGINAL = RUN = NULL
originalRUN = FRACTION = TECHREPLICATE = NULL
input[!is.na(ABUNDANCE) & ABUNDANCE < 0, "ABUNDANCE"] = 0
input[!is.na(INTENSITY) & INTENSITY == 1, "ABUNDANCE"] = 0
if (data.table::uniqueN(input$FRACTION) == 1) {
return(input)
} else {
if (is.element("TECHREPLICATE", colnames(input))) {
run_info = unique(input[,
list(GROUP_ORIGINAL, SUBJECT_ORIGINAL, RUN,
originalRUN, FRACTION, TECHREPLICATE)])
match_runs = try(
data.table::dcast(run_info,
GROUP_ORIGINAL + SUBJECT_ORIGINAL + TECHREPLICATE ~ FRACTION,
value.var = "originalRUN"), silent = TRUE
)
if (inherits(match_runs, "try-error")) {
msg = "*** error : can't figure out which multiple runs come from the same sample."
getOption("MSstatsLog")("ERROR", msg)
stop(msg)
} else {
input$newRun = NA
input$newRun = as.character(input$newRun)
run_info[, GROUP_ORIGINAL := as.character(GROUP_ORIGINAL)]
run_info[, SUBJECT_ORIGINAL := as.character(SUBJECT_ORIGINAL)]
for (k in 1:nrow(run_info)) {
input[originalRUN %in% run_info[k, 4:ncol(run_info)], "newRun"] = paste(paste(run_info[k, 1:4], collapse = "_"), 'merged', sep = "_")
}
select_fraction = input[!is.na(ABUNDANCE) & ABUNDANCE > 0,
list(ncount = .N),
by = c("FEATURE", "FRACTION")]
select_fraction = select_fraction[ncount == data.table::uniqueN(input$newRun)]
select_fraction[, tmp := paste(FEATURE, FRACTION, sep = "_")]
input$tmp = paste(input$FEATURE, input$FRACTION, sep="_")
input = input[!(tmp %in% select_fraction$tmp), ]
input$originalRUN = input$newRun
input$RUN = input$originalRUN
input$RUN = factor(input$RUN, levels=unique(input$RUN), labels=seq(1, length(unique(input$RUN))))
input = input[, !(colnames(input) %in% c('tmp','newRun')), with = FALSE]
}
} else {
run_info = unique(input[,
list(GROUP_ORIGINAL, SUBJECT_ORIGINAL, RUN,
originalRUN, FRACTION)])
match_runs = try(
data.table::dcast(run_info,
GROUP_ORIGINAL + SUBJECT_ORIGINAL ~ FRACTION,
value.var = "originalRUN"), silent = TRUE
)
if (inherits(match_runs, "try-error")) {
msg = "*** error : can't figure out which multiple runs come from the same sample."
getOption("MSstatsLog")("ERROR", msg)
stop(msg)
} else {
match_runs[, merged := "merged"]
match_runs[, newRun := do.call(paste, c(.SD, sep = "_")),
.SDcols = c(1:3, ncol(match_runs))]
match_runs = unique(match_runs[, list(GROUP_ORIGINAL,
SUBJECT_ORIGINAL,
newRun)])
input = merge(input, match_runs,
by = c("GROUP_ORIGINAL", "SUBJECT_ORIGINAL"),
all.x = TRUE)
select_fraction = input[!is.na(ABUNDANCE) & input$ABUNDANCE > 0,
list(ncount = .N),
by = c("FEATURE", "FRACTION")]
select_fraction = select_fraction[ncount != 0]
select_fraction[, tmp := paste(FEATURE, FRACTION, sep = "_")]
input$tmp = paste(input$FEATURE, input$FRACTION, sep = "_")
input = input[tmp %in% select_fraction$tmp, ]
input$originalRUN = input$newRun
input$RUN = input$originalRUN
input$RUN = factor(input$RUN, levels = unique(input$RUN),
labels = seq_along(unique(input$RUN)))
input = input[, !(colnames(input) %in% c('tmp','newRun')),
with = FALSE]
}
}
}
input
}
input = MSstatsNormalize(PTM_df, normalization, peptides_dict, nameStandards)
library(data.table)
input = MSstatsNormalize(PTM_df, normalization, peptides_dict, nameStandards)
input = MSstatsNormalize(as.data.table(PTM_df), normalization, peptides_dict, nameStandards)
head(PTM_df)
colnames(PTM_df) <- toupper(colnames(PTM_df))
input = MSstatsNormalize(as.data.table(PTM_df), normalization, peptides_dict, nameStandards)
input = MSstatsPrepareForDataProcess(as.data.table(PTM_df), logTrans,
fix_missing, fillIncompleteRows)
dataProcess(PTM_df)
knitr::opts_chunk$set(echo = TRUE)
raw_df <- readRDS("C:\\Users\\Devon Kohler\\Documents\\Northeastern\\Research\\MSstats\\TMT_PTM_Projects\\Tsung_Heng_Data\\usp30-site.RDS")
## Split up raw and protein datasets
PTM_df <- raw_df %>% filter(is_mod == TRUE)
library(MSstatsdev)
library(tidyverse)
library(MSstatsPTM)
PTM_df <- raw_df %>% filter(is_mod == TRUE)
protein_df <- raw_df %>% filter(is_mod == FALSE)
## Create list for input into MSstatsPTM functions
processed_df <- list('PTM' = PTM_df, 'Protein' = protein_df)
head(PTM_df)
PTM_df_msstats <- PTM_df
## Add missing columns
PTM_df_msstats$PrecursorCharge <- NA
PTM_df_msstats$FragmentIon <- NA
PTM_df_msstats$ProductCharge <- NA
PTM_df_msstats$IsotopeLabelType <- 'L'
## Combine proteins and sites so that we can estimate PTMs (like MSstatsTMTPTM)
PTM_df_msstats$ProteinName <- paste(PTM_df_msstats$protein,
PTM_df_msstats$site, sep = '_')
drops <- c("protein","site", 'is_mod', 'peptide')
PTM_df_msstats <- PTM_df_msstats[ , !(names(PTM_df_msstats) %in% drops)]
## Rename columns
colnames(PTM_df_msstats) <- c('PeptideSequence', 'Condition', 'BioReplicate',
'Run', 'Intensity', 'PrecursorCharge',
'FragmentIon', 'ProductCharge',
'IsotopeLabelType', 'ProteinName')
## Remove log intensity
PTM_df_msstats$Intensity <- 2^PTM_df_msstats$Intensity
## New var for msstats
PTM_df_msstats <- PTM_df
## Add missing columns
PTM_df_msstats$PrecursorCharge <- NA
PTM_df_msstats$FragmentIon <- NA
PTM_df_msstats$ProductCharge <- NA
PTM_df_msstats$IsotopeLabelType <- 'L'
## Combine proteins and sites so that we can estimate PTMs (like MSstatsTMTPTM)
PTM_df_msstats$ProteinName <- paste(PTM_df_msstats$protein,
PTM_df_msstats$site, sep = '_')
drops <- c("protein","site", 'is_mod', 'peptide')
PTM_df_msstats <- PTM_df_msstats[ , !(names(PTM_df_msstats) %in% drops)]
## Rename columns
colnames(PTM_df_msstats) <- c('PeptideSequence', 'Condition', 'BioReplicate',
'Run', 'Intensity', 'PrecursorCharge',
'FragmentIon', 'ProductCharge',
'IsotopeLabelType', 'ProteinName')
## Remove log intensity
PTM_df_msstats$Intensity <- 2^PTM_df_msstats$Intensity
## MSstatsDev
summarized_ptm <- dataProcess(PTM_df_msstats)
head(summarized_ptm[[2]])
head(processed_summ_df[['PTM']] %>% filter(protein == 'P36578' & site == 'K364'
& run == 'CCCP-B1T1'))
processed_df_norm <- PTMnormalize(processed_df)
head(processed_df_norm['PTM'])
processed_summ_df <- PTMsummarize(processed_df_norm)
head(processed_summ_df['PTM'])
head(processed_summ_df[['PTM']] %>% filter(protein == 'P36578' & site == 'K364'
& run == 'CCCP-B1T1'))
msstats_summ_results <- summarized_ptm[[2]]
msstatsptm_summ_results <- processed_summ_df[['PTM']]
head(summarized_ptm[[2]] %>% filter(Protein == 'P36578_K364'
& originalRUN == 'CCCP-B1T1'))
head(processed_summ_df[['PTM']] %>% filter(protein == 'P36578' & site == 'K364'
& run == 'CCCP-B1T1'))
msstats_summ_results <- summarized_ptm[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstats_summ_results <- summarized_ptm[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstatsptm_summ_results$protein <- paste(msstatsptm_summ_results$protein,
msstatsptm_summ_results$site,
sep = '_')
head(msstatsptm_summ_results)
head(msstats_summ_results)
drops <- c("protein","site")
msstatsptm_summ_results <- msstatsptm_summ_results[, !(
names(msstatsptm_summ_results) %in% drops)]
head(msstatsptm_summ_results)
msstats_summ_results <- summarized_ptm[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstatsptm_summ_results$protein <- paste(msstatsptm_summ_results$protein,
msstatsptm_summ_results$site,
sep = '_')
drops <- c("site")
msstatsptm_summ_results <- msstatsptm_summ_results %>% select(!site)
head(msstatsptm_summ_results)
compare_summ <- msstats_summ_results %>% inner_join(msstatsptm_summ_results,
by = c('Protein' = 'protein',
'originalRUN' = 'run'))
head(compare_summ)
head(msstats_summ_results)
head(msstatsptm_summ_results)
msstats_summ_results <- summarized_ptm[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstatsptm_summ_results$protein <- paste(msstatsptm_summ_results$protein,
msstatsptm_summ_results$site,
sep = '_')
msstatsptm_summ_results <- msstatsptm_summ_results %>% select(!site)
compare_summ <- msstats_summ_results %>% inner_join(msstatsptm_summ_results,
by = c('Protein' = 'protein',
'originalRUN' = 'run'))
head(compare_summ)
compare_summ <- msstats_summ_results %>% left_join(msstatsptm_summ_results,
by = c('Protein' = 'protein',
'originalRUN' = 'run'))
by = c('Protein' = 'protein',
head(compare_summ)
head(msstatsptm_summ_results)
head(msstats_summ_results)
processed_df_norm <- PTMnormalize(processed_df)
head(processed_df_norm['PTM'])
raw_df <- readRDS("C:\\Users\\Devon Kohler\\Documents\\Northeastern\\Research\\MSstats\\TMT_PTM_Projects\\Tsung_Heng_Data\\usp30-site.RDS")
## Split up raw and protein datasets
PTM_df <- raw_df %>% filter(is_mod == TRUE)
protein_df <- raw_df %>% filter(is_mod == FALSE)
## Create list for input into MSstatsPTM functions
processed_df <- list('PTM' = PTM_df, 'Protein' = protein_df)
head(PTM_df)
## MSstatsPTM
processed_df_norm <- PTMnormalize(processed_df)
head(processed_df_norm['PTM'])
processed_summ_df <- PTMsummarize(processed_df_norm)
head(processed_summ_df['PTM'])
head(summarized_ptm[[2]] %>% filter(Protein == 'P36578_K364'
& originalRUN == 'CCCP-B1T1'))
head(processed_summ_df[['PTM']] %>% filter(protein == 'P36578' & site == 'K364'
& run == 'CCCP-B1T1'))
msstats_summ_results <- summarized_ptm[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstatsptm_summ_results$protein <- paste(msstatsptm_summ_results$protein,
msstatsptm_summ_results$site,
sep = '_')
msstatsptm_summ_results <- msstatsptm_summ_results %>% select(!site)
compare_summ <- msstats_summ_results %>% left_join(msstatsptm_summ_results,
by = c('Protein' = 'protein',
'originalRUN' = 'run'))
?geom_histogram
compare_summ$difference <- compare_summ$LogIntensities - compare_summ$log2inty
compare_summ %>% ggplot() + geom_histogram(aes(difference))
compare_summ %>% filter(abs(difference) > 1)
compare_summ %>% filter(abs(difference) > 2)
compare_summ %>% ggplot() + geom_histogram(aes(difference))
compare_summ %>% filter(abs(difference) > 1)
compare_summ %>% filter(abs(difference) > 3)
compare_summ %>% ggplot() + geom_bar(aes(x = originalRUN))
compare_summ %>% filter(abs(difference) > 3)
compare_summ %>% ggplot() + geom_bar(aes(x = Protein))
compare_summ %>% filter(abs(difference) > 3)
library(MSstats)
summarized_ptm_base <- dataProcess(PTM_df_msstats,
MBimpute = FALSE)
msstats_summ_results <- summarized_ptm_base[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstatsptm_summ_results$protein <- paste(msstatsptm_summ_results$protein,
msstatsptm_summ_results$site,
sep = '_')
msstatsptm_summ_results <- msstatsptm_summ_results %>% select(!site)
compare_summ <- msstats_summ_results %>% left_join(msstatsptm_summ_results,
by = c('Protein' = 'protein',
'originalRUN' = 'run'))
compare_summ$difference <- compare_summ$LogIntensities - compare_summ$log2inty
compare_summ %>% ggplot() + geom_histogram(aes(difference))
original_msstats_summ_results <- summarized_ptm_base[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstats_summ_results <- summarized_ptm[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstatsptm_summ_results$protein <- paste(msstatsptm_summ_results$protein,
msstatsptm_summ_results$site,
sep = '_')
msstatsptm_summ_results <- msstatsptm_summ_results %>% select(!site)
compare_summ <- msstats_summ_results %>% left_join(msstatsptm_summ_results,
by = c('Protein' = 'protein',
'originalRUN' = 'run'))
compare_summ$difference <- compare_summ$LogIntensities - compare_summ$log2inty
compare_summ %>% ggplot() + geom_histogram(aes(difference))
original_msstats_summ_results %>% rename(
LogIntensities = orig_LogIntensities
)
original_msstats_summ_results <- original_msstats_summ_results %>% rename(
orig_LogIntensities = LogIntensities)
msstats_summ_results <- summarized_ptm[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstatsptm_summ_results$protein <- paste(msstatsptm_summ_results$protein,
msstatsptm_summ_results$site,
sep = '_')
msstatsptm_summ_results <- msstatsptm_summ_results %>% select(!site)
compare_summ <- msstats_summ_results %>% left_join(msstatsptm_summ_results,
by = c('Protein' = 'protein',
'originalRUN' = 'run'))
compare_summ$difference <- compare_summ$LogIntensities - compare_summ$log2inty
compare_summ <- compare_summ %>% inner_join(original_msstats_summ_results)
head(compare_summ)
compare_summ$difference <- compare_summ$LogIntensities - compare_summ$log2inty
compare_summ$difference_orig <- compare_summ$orig_LogIntensities - compare_summ$log2inty
compare_summ$difference_msstats <- compare_summ$LogIntensities - compare_summ$orig_LogIntensities
compare_summ %>% ggplot() + geom_histogram(aes(difference))
compare_summ %>% ggplot() + geom_histogram(aes(difference_orig))
compare_summ %>% ggplot() + geom_histogram(aes(difference_msstats))
knitr::opts_chunk$set(echo = TRUE)
library(MSstatsdev)
library(tidyverse)
library(MSstatsPTM)
raw_df <- readRDS("C:\\Users\\Devon Kohler\\Documents\\Northeastern\\Research\\MSstats\\TMT_PTM_Projects\\Tsung_Heng_Data\\usp30-site.RDS")
PTM_df <- raw_df %>% filter(is_mod == TRUE)
protein_df <- raw_df %>% filter(is_mod == FALSE)
## Create list for input into MSstatsPTM functions
processed_df <- list('PTM' = PTM_df, 'Protein' = protein_df)
processed_df_norm <- PTMnormalize(processed_df)
processed_summ_df <- PTMsummarize(processed_df_norm)
PTM_df_msstats <- PTM_df
## Add missing columns
PTM_df_msstats$PrecursorCharge <- NA
PTM_df_msstats$FragmentIon <- NA
PTM_df_msstats$ProductCharge <- NA
PTM_df_msstats$IsotopeLabelType <- 'L'
## Combine proteins and sites so that we can estimate PTMs (like MSstatsTMTPTM)
PTM_df_msstats$ProteinName <- paste(PTM_df_msstats$protein,
PTM_df_msstats$site, sep = '_')
drops <- c("protein","site", 'is_mod', 'peptide')
PTM_df_msstats <- PTM_df_msstats[ , !(names(PTM_df_msstats) %in% drops)]
## Rename columns
colnames(PTM_df_msstats) <- c('PeptideSequence', 'Condition', 'BioReplicate',
'Run', 'Intensity', 'PrecursorCharge',
'FragmentIon', 'ProductCharge',
'IsotopeLabelType', 'ProteinName')
## Remove log intensity
PTM_df_msstats$Intensity <- 2^PTM_df_msstats$Intensity
summarized_ptm <- dataProcess(PTM_df_msstats)
ptm_model <- PTMestimate(processed_summ_df[['PTM']])
processed_summ_df['PTM']
ptm_model <- PTMestimate(processed_summ_df['PTM'])
msstats_model <- groupComparison(summarized_ptm)
?MSstatsdev
?MSstats_dev
?MSstatsdev
library(MSstatsdev)
?MSstatsdev
library(MSstatsdev)
msstats_model <- groupComparison(summarized_ptm)
library(MSstats)
msstats_model <- groupComparison(summarized_ptm)
msstats_model <- groupComparison(as.data.frame(summarized_ptm))
msstats_model <- groupComparison(summarized_ptm[2])
msstats_model <- groupComparison(summarized_ptm[[2]])
summarized_ptm[[2]]
msstats_model <- groupComparison(as.data.frame(summarized_ptm[[2]]))
msstats_model <- groupComparison(summarized_ptm$ProcessedData)
names(summarized_ptm)
msstats_model <- groupComparison(as.data.frame(summarized_ptm$ProcessedData))
library(MSstatsdev)
## New var for msstats
PTM_df_msstats <- PTM_df
## Add missing columns
PTM_df_msstats$PrecursorCharge <- NA
PTM_df_msstats$FragmentIon <- NA
PTM_df_msstats$ProductCharge <- NA
PTM_df_msstats$IsotopeLabelType <- 'L'
## Combine proteins and sites so that we can estimate PTMs (like MSstatsTMTPTM)
PTM_df_msstats$ProteinName <- paste(PTM_df_msstats$protein,
PTM_df_msstats$site, sep = '_')
drops <- c("protein","site", 'is_mod', 'peptide')
PTM_df_msstats <- PTM_df_msstats[ , !(names(PTM_df_msstats) %in% drops)]
## Rename columns
colnames(PTM_df_msstats) <- c('PeptideSequence', 'Condition', 'BioReplicate',
'Run', 'Intensity', 'PrecursorCharge',
'FragmentIon', 'ProductCharge',
'IsotopeLabelType', 'ProteinName')
## Remove log intensity
PTM_df_msstats$Intensity <- 2^PTM_df_msstats$Intensity
summarized_ptm <- dataProcess(PTM_df_msstats,
MBimpute = FALSE)
msstats_summ_results <- summarized_ptm[[2]] %>% select(Protein, LogIntensities,
originalRUN)
msstatsptm_summ_results <- processed_summ_df[['PTM']] %>% select(protein, site,
run, log2inty)
msstatsptm_summ_results$protein <- paste(msstatsptm_summ_results$protein,
msstatsptm_summ_results$site,
sep = '_')
msstatsptm_summ_results <- msstatsptm_summ_results %>% select(!site)
compare_summ <- msstats_summ_results %>% inner_join(msstatsptm_summ_results,
by = c('Protein' = 'protein',
'originalRUN' = 'run'))
compare_summ$difference <- compare_summ$LogIntensities - compare_summ$log2inty
compare_summ %>% ggplot() + geom_histogram(aes(difference)) + labs(
title = 'Difference Between MSstatsPTM and MSstats_dev')
compare_summ %>% ggplot() + geom_histogram(aes(difference), bins = 20) + labs(
title = 'Difference Between MSstatsPTM and MSstats_dev')
compare_summ %>% ggplot() + geom_histogram(aes(difference), bins = 50) + labs(
title = 'Difference Between MSstatsPTM and MSstats_dev')
library(MSstats)
?MSstats
library(MSstatsdev)
?MSstatsdev
library(MSstatsTMT)
?MSstatsTMT
library(checkmate)
?dataProcess
library(shiny)
runApp()
?normal
dist1 <- rnorm(100, 3, 1)
dist1
dist2 <- rnorm(100, 4, 1)
rep(100, "dist1")
rep("dist1",100)
plot <- data.frame("data" = c(dist1, dist2), data = c(rep("dist1", 100), rep("dist2", 100)))
plot
library(tidyverse)
plot %>% ggplot() + geom_histogram(aes(y = data))
plot %>% ggplot() + geom_histogram(aes(x = data))
plot %>% ggplot() + geom_histogram(aes(x = data, hue = dist))
plot <- data.frame("data" = c(dist1, dist2), "dist" = c(rep("dist1", 100), rep("dist2", 100)))
plot %>% ggplot() + geom_histogram(aes(x = data, hue = dist))
plot %>% ggplot() + geom_histogram(aes(x = data, color = dist))
plot %>% ggplot() + geom_histogram(aes(x = data, fill = dist))
plot <- data.frame("data" = c(rnorm(1000, 3, 1), rnorm(1000, 4, 1)), "dist" = c(rep("dist1", 1000), rep("dist2", 1000)))
plot %>% ggplot() + geom_histogram(aes(x = data, fill = dist))
knitr::opts_chunk$set(echo = TRUE)
fig2.5 <- dagitty('dag {
X -> R -> S -> T
V -> Y
V -> U ->T
}')
library(dagitty)
}')
fig2.5 <- dagitty('dag {
X -> R -> S -> T
V -> Y
V -> U ->T
}')
plot(graphLayout(fig2.5))
fig2.6 <- dagitty("dag {
X -> R -> S -> T <- U <- V -> Y
T -> P
}")
plot( graphLayout( fig2.6 ) )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(data.table)
library(lattice)
library(dagitty)
df <- fread(
"http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2025%20Data%20Sets/CH25PR07.txt"
)
colnames(df) <- c("sodium", "brand", "replicate")
df$brand <- as.factor(df$brand)
fit <- lm(sodium ~ brand, df)
summary(fit)
summary(aov(fit))
## Using data from the aov table
F_0 = 170.91/.72
r <- length(unique(df$brand))
n <- length(unique(df$replicate))
df(F_0, r-1, (n*r)-r)
alpha <- .01
s_trt <- sqrt(170.91 / (r*n))
overall_mean <- mean(df$sodium)
r-1
pt(1-(alpha/2), r-1)
?pt
pt(.995, r-1)
s_trt
qt(1-(alpha/2), r-1)
library(tidyverse)
df <- read.csv("D:\\Northeastern\\Fall 2021\\CS7340\\Final_Project\\Data\\MSstats-Shiny User Evaluation.csv")
df[1,1]
df[,1]
df[,2]
df[,3]
plot_data <- data.frame("User Experience with R" = df[,3])
plot_data
?geom_bar
plot_data %>% ggplot() + geom_bar(aes(y = rate))
plot_data <- data.frame("rate" = df[,3])
plot_data %>% ggplot() + geom_bar(aes(y = rate))
plot_data %>% ggplot() + geom_bar(aes(x = rate))
plot_data %>% ggplot() + geom_bar(aes(x = rate), fill = TRUE) + scale_fill_manual(values=cbPalette)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
plot_data %>% ggplot() + geom_bar(aes(x = rate), fill = TRUE) + scale_fill_manual(values=cbPalette)
plot_data %>% ggplot() + geom_bar(aes(x = rate), fill = "red") + scale_fill_manual(values=cbPalette)
plot_data %>% ggplot() + geom_bar(aes(x = rate, fill = rate)) + scale_fill_manual(values=cbPalette)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#999999")
plot_data %>% ggplot() + geom_bar(aes(x = rate, fill = rate)) + scale_fill_manual(values=cbPalette)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#999999")
plot_data %>% ggplot() + geom_bar(aes(x = rate, fill = rate)) + scale_fill_manual(values=cbPalette)
library(MSstatsPTM)
library(data.table)
library(tidyverse)
library(gridExtra)
library(ggrepel)
library(VennDiagram)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ptm_input <- read.csv("../data/IpaH_PTM_Input.txt")
setwd("D:/Northeastern/Research/MSstats/MSstatsPTM-manuscript/code")
library(MSstatsPTM)
library(data.table)
library(tidyverse)
library(gridExtra)
library(ggrepel)
library(VennDiagram)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ptm_input <- read.csv("../data/IpaH_PTM_Input.txt")
ptm_input
